#+PROPERTY: header-args:emacs-lisp :tangle ./init.el
* Initialize package manager
** package.el
Package.el is only for downloading use-package, just like IE is only for downloading Chrome
#+begin_src emacs-lisp
(require 'package)

(add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
(add-to-list 'package-archives '("gnu" . "http://elpa.gnu.org/packages/"))
(add-to-list 'package-archives '("org" . "http://orgmode.org/elpa/"))

(package-initialize)

#+end_src

** use-package
Install use-package if it is not installed then enable it
#+begin_src emacs-lisp
;;; If use-pacakge is not installed, instll it first before requiring
(unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))

(require 'use-package)
#+end_src

** Use package always ensure
This ensures all use-packages install on first load or if elpa package does not exist 
#+begin_src emacs-lisp
(setq use-package-always-ensure t)
#+end_src

* Utility Parameters
** Enable copy to Primary clipboard
This enable x server to copy and paste text to Primary Clipboard
#+begin_src emacs-lisp
(setq x-select-enable-primary t)
#+end_src

** Auto revert file 
Refresh file content with newer content on disk
#+begin_src emacs-lisp
(setq global-auto-revert-mode t)
#+end_src

** Desktop mode
Save buffers on disk so you can resume them later
#+begin_src emacs-lisp
(desktop-save-mode 1)
#+end_src
** Set default to home directory
Linux usually dont have this problem, but in Mac, Emacs starts in root directory.
#+begin_src emacs-lisp
(setq default-directory "~/")
(setq command-line-default-directory "~/")
#+end_src

** Set execute path from shell
*** Package
Get executing path from Shell. 
Aka. Inherit shell's path into Emacs, fix some /usr/bin not found.
#+begin_src emacs-lisp
(use-package exec-path-from-shell)
#+end_src

*** Apply to system
Use only for Mac OSX system
#+begin_src emacs-lisp
(when (memq window-system '(mac))
  (exec-path-from-shell-initialize)
)
#+end_src

* UI improvements
** Welcome/Splash screen
Add Dashboard splash screen. It is better than default
#+begin_src emacs-lisp
(use-package dashboard
  :ensure t
  :config
  (dashboard-setup-startup-hook)
  (setq dashboard-projects-backend 'projectile)
  (add-to-list 'dashboard-items '(projects . 5))
)
#+end_src

** Theme
Intellij Darcula Theme for Emacs
#+begin_src emacs-lisp
(use-package jetbrains-darcula-theme
    :config (load-theme 'jetbrains-darcula t)
)
#+end_src

** Font
Load font face and font size
#+begin_src emacs-lisp
(set-frame-font "DejaVu Sans Mono 11" nil t)
#+end_src

** All the icons
Add icons to various plugins
#+begin_src emacs-lisp
(use-package all-the-icons)
#+end_src

** Line Number
*** Global
Set number lines for all modes and line number type to relative
#+begin_src emacs-lisp
(global-display-line-numbers-mode)
(setq display-line-numbers-type 'relative)
#+end_src

*** eshell 
**** No Line number
Do not show line number for eshell
#+begin_src emacs-lisp
(use-package eshell
    :init (add-hook 'eshell-mode-hook
        (lambda () (setq-local display-line-numbers-type nil))
    )
)
#+end_src

**** Directory first
#+begin_src emacs-lisp
(setq dired-listing-switches "-lXGh --group-directories-first")
#+end_src

** Load newer file 
Always load newer modified version of elpa package if you did modify it on your own. This does NOT download newer package via use-package
#+begin_src emacs-lisp
(setq load-prefer-newer t)
#+end_src

** Scroll bar, menu bar, tool bar
Hide scroll bar
#+begin_src emacs-lisp
(scroll-bar-mode -1)
(menu-bar-mode -1)
(tool-bar-mode -1) 
#+end_src

** Cursor
Solid cursor, default is blinking
#+begin_src emacs-lisp
(blink-cursor-mode 0)
#+end_src

** Spaceline

*** Powerline status bar
Base package
#+begin_src emacs-lisp
(use-package spaceline
    :config (spaceline-emacs-theme)
)
#+end_src

*** Include time in spaceline
Add time to mode line
#+begin_src emacs-lisp
(setq display-time-24hr-format t) 
(setq display-time-format "%H:%M:%S")        ; add seconds
(setq display-time-default-load-average nil)
(setq display-time-interval 1)               ; update every second
(display-time-mode 1)                 ; show time in mode line on startup
#+end_src

** Centaur Tabs
Have file tabs like vscode
#+begin_src emacs-lisp
(use-package centaur-tabs
    :demand
    :config
        (centaur-tabs-mode t)
        (setq centaur-tabs-set-modified-marker t)
        (setq centaur-tabs-set-icons t)
        (setq centaur-tabs-style "bar")
        (setq centaur-tabs-set-bar 'left)
        (centaur-tabs-change-fonts "DejaVu Sans Mono" 120)
        (centaur-tabs-group-by-projectile-project)
)
#+end_src

** Nyan Mode
Nyan Cat progress bar
#+begin_src emacs-lisp
(use-package nyan-mode
    :config (setq nyan-mode t)
)
#+end_src

** Ivy
*** Ivy
Minibuffer framework so things dont take up the entire window
#+begin_src emacs-lisp
  (use-package ivy
    :defer 0.1
    :diminish
    :config (ivy-mode)
    (define-key ivy-minibuffer-map (kbd "C-j") #'ivy-next-line)
    (define-key ivy-minibuffer-map (kbd "C-k") #'ivy-previous-line)
    ; Swiper mapped C-K to kill buffer, need to remap that to previous line
    (define-key ivy-switch-buffer-map (kbd "C-k") #'ivy-previous-line)
    (define-key ivy-switch-buffer-map (kbd "C-x") #'ivy-switch-buffer-kill)
  )
  
#+end_src

*** Ivy Prescient
Filter ivy results based on how recent one result is
#+begin_src emacs-lisp
(use-package ivy-prescient)
#+end_src

*** Ivy Rich
Display additional information, see counsel-switch-buffer for example
#+begin_src emacs-lisp
  (use-package ivy-rich
    :init (ivy-rich-mode 1)
  )
#+end_src

*** Ivy Posframe
Show Ivy in the center of the frame
#+begin_src emacs-lisp
(use-package ivy-posframe
  :diminish ivy-posframe-mode
  :hook (ivy-mode . ivy-posframe-mode)
  :config
  (setq ivy-posframe-height-alist '(
      (swiper . 15)
      (find-file . 20)
      (counsel-ag . 15)
      (counsel-projectile-ag . 30)
      (t      . 25)
    )
  )

  (setq ivy-posframe-display-functions-alist
    '(
      (complete-symbol . ivy-posframe-display-at-point)
      (counsel-M-x     . ivy-posframe-display-at-frame-center)
      (t               . ivy-posframe-display-at-frame-center)
    )
  )

  (defun ivy-posframe-get-size ()
    (list
      :height 30
      :width 100
      :min-height (or ivy-posframe-min-height (round (* (frame-height) 0.6)))
      :min-width (or ivy-posframe-min-width (round (* (frame-width) 0.62)))
    )
  )
  (ivy-posframe-mode 1)
)
#+end_src

*** Counsel
Command mode with smart search and use ivy minibuffer framework
#+begin_src emacs-lisp
(use-package counsel
    :after ivy
    :config
        (setcdr (assoc 'counsel-M-x ivy-initial-inputs-alist) "")
)
#+end_src

*** Counsel Projectile
Allow Projectile to use Counsel minibuffer
#+begin_src emacs-lisp
(use-package counsel-projectile
  :config (counsel-projectile-mode)
)
#+end_src

*** Swiper 
Search in file for specific keyword
#+begin_src emacs-lisp
  (use-package swiper
    :after ivy
    :bind (
      ("C-p" . swiper)
    )
  )
#+end_src

* Auth Sources
Add auth_info gpg file to store API Token etc
#+begin_src emacs-lisp
(setq auth-sources '((:source "~/.authinfo.gpg")))
#+end_src

* Evil Mode
** Vim keybinding for Emacs
Emulate Vim key binding inside Emacs
#+begin_src emacs-lisp
(use-package evil
    :init
      ; Need this for evil-collection to work properly
      (setq evil-want-keybinding nil)
      ; Evil mode set Ctrl-U to scroll up.
      (setq evil-want-C-u-scroll t)
      (setq evil-want-C-i-jump nil)
      (setq evil-normal-state-tag "NORMAL")
      (setq evil-insert-state-tag "INSERT")
      (setq evil-visual-state-tag "VISUAL")
      ; Define undo-redo system, otherwise redo wont work
      (setq evil-undo-system 'undo-fu)
    :config
      ; Remap colon and semicolon
      (define-key evil-motion-state-map ";" #'evil-ex)
      (define-key evil-motion-state-map ":" #'evil-repeat-find-char)
      ;; C-p is used for Swiper, so we need to unbind it from evil
      (define-key evil-normal-state-map (kbd "C-p") nil)
      (define-key evil-emacs-state-map (kbd "C-z") nil)
      ;; (define-key evil-normal-state-map (kbd "C-h") #'evil-window-left)
      ;; (define-key evil-normal-state-map (kbd "C-j") #'evil-window-down)
      ;; (define-key evil-normal-state-map (kbd "C-k") #'evil-window-up)
      ;; (define-key evil-normal-state-map (kbd "C-l") #'evil-window-right)

      (evil-mode) 
)
#+end_src

** Evil collection
Vim bindings for other applications, default is only for text editor
#+begin_src emacs-lisp
(use-package evil-collection
    :after evil
    :config (evil-collection-init)
)
#+end_src

** Evil Commentary
Use gcc for comment/uncomment line of code
#+begin_src emacs-lisp
(use-package evil-commentary
    :config (evil-commentary-mode)
)
#+end_src

** Evil EasyMotion
Move to speicific word easily with EasyMotion
#+begin_src emacs-lisp
(use-package evil-easymotion
  :config
  (evilem-default-keybindings "SPC")
  (evilem-define (kbd "SPC w") 'evil-forward-WORD-begin)
  (evilem-define (kbd "SPC W") 'evil-backward-WORD-begin)
)
#+end_src

** Evil Surround
Surround words with symbols based on text object, start with ys<textObject>
#+begin_src emacs-lisp
(use-package evil-surround
  :config (global-evil-surround-mode 1)
)
#+end_src

** Evil Multiedit
Multi select just like sublime text
#+begin_src emacs-lisp
(use-package evil-multiedit
  :config
    ;; Highlights all matches of the selection in the buffer.
    (define-key evil-visual-state-map "R" 'evil-multiedit-match-all)

    ;; Match the word under cursor (i.e. make it an edit region). Consecutive presses will
    ;; incrementally add the next unmatched match.
    (define-key evil-normal-state-map (kbd "M-d") 'evil-multiedit-match-symbol-and-next)
    ;; Match selected region.
    (define-key evil-visual-state-map (kbd "M-d") 'evil-multiedit-match-symbol-and-next)

    ;; Same as M-d but in reverse.
    (define-key evil-normal-state-map (kbd "M-D") 'evil-multiedit-match-symbol-and-prev)
    (define-key evil-visual-state-map (kbd "M-D") 'evil-multiedit-match-symbol-and-prev)

    ;; Ex command that allows you to invoke evil-multiedit with a regular expression, e.g.
    (evil-ex-define-cmd "ie[dit]" 'evil-multiedit-ex-match)
)
#+end_src

** undo-fu
Undo Redo system for evil mode (Emacs 28 should have build-in undo-redo system)
#+begin_src emacs-lisp
(use-package undo-fu)
#+end_src

* Mu4e
** Setup
*** System Packages
You will need to setup mu package using your system package manager.
mu - mail client for viewing emails
isync - downloading IMAP server emails
#+begin_src bash
yay mu 
yay isync
#+end_src
*** Gmail setup
You will need to enable 'less secure app' or 'app password'
Google how to do this.
*** GPG key
GPG Public and Private key.
You are using public key to encrypt a file. Then Private key is to decrypt and read the message.

Create a file named isyncpass in home directory and put your password/app password inside this file. Then generate a gpg key.
#+begin_src bash
gpg --full-generate-key
#+end_src

Then encrypt the file.
#+begin_src bash
gpg -e -r "Your email" ~/isyncpass
#+end_src

Remove the original isyncpass file and only have the isyncpass.gpg

*** ~/.mbsyncrc
Then creating a new ~/.mbsyncrc file and use this template
#+begin_src conf
IMAPAccount gmail
Host imap.gmail.com
User 4542elgh@gmail.com
PassCmd "gpg2 --quiet --for-your-eyes-only --no-tty --decrypt ~/isyncpass.gpg"
SSLType IMAPS
CertificateFile /etc/ssl/certs/ca-certificates.crt

MaxMessages 300

IMAPStore gmail-remote
Account gmail

MaildirStore gmail-local
Subfolders Verbatim
Path ~/Mail/
Inbox ~/Mail/Inbox

Channel gmail
Master :gmail-remote:
Slave :gmail-local:
Patterns * ![Gmail]* "[Gmail]/Sent Mail" "[Gmail]/Starred" "[Gmail]/All Mail" "[Gmail]/Trash"
Create Both
SyncState *
#+end_src

Then sync with the IMAP server. 
Recommend MaxMessages be a small number to not exceed Google Quota
#+begin_src bash
mbsync -a
#+end_src

** mu4e client
Email client for your personal email
#+begin_src emacs-lisp
(use-package mu4e
    :ensure nil
    :config

    ;; This is set to 't' to avoid mail syncing issues when using mbsync
    (setq mu4e-change-filenames-when-moving t)

    ;; Refresh mail using isync every 1 minutes
    (setq mu4e-update-interval (* 1 60))
    (setq mu4e-get-mail-command "mbsync -a")
    (setq mu4e-maildir "~/Mail")

    (setq mu4e-drafts-folder "/[Gmail]/Drafts")
    (setq mu4e-sent-folder   "/[Gmail]/Sent Mail")
    (setq mu4e-refile-folder "/[Gmail]/All Mail")
    (setq mu4e-trash-folder  "/[Gmail]/Trash")

    (setq mu4e-maildir-shortcuts
        '(("/Inbox"             . ?i)
          ("/[Gmail]/Sent Mail" . ?s)
          ("/[Gmail]/Trash"     . ?t)
          ("/[Gmail]/Drafts"    . ?d)
          ("/[Gmail]/All Mail"  . ?a))
    )
)
#+end_src

** Mu4e notifier
Make sure mu4e is opened in one of your buffers, refresh notification every 30 seconds.
#+begin_src emacs-lisp
(use-package mu4e-alert
    :config
    (mu4e-alert-set-default-style 'libnotify)
    (add-hook 'after-init-hook #'mu4e-alert-enable-notifications)
)
#+end_src

* Spotify
Control spotify app within emacs
#+begin_src emacs-lisp
(use-package counsel-spotify
    :config
    (setq counsel-spotify-client-id (auth-source-pick-first-password :host "client.spotify.com" :user "4542elgh@gmail.com"))	
    (setq counsel-spotify-client-secret (auth-source-pick-first-password :host "secret.spotify.com" :user "4542elgh@gmail.com"))
)
#+end_src
* Docker
** Docker
Manage docker image and docker run
#+begin_src emacs-lisp
(use-package docker
  :ensure t
  :bind ("C-c d" . docker))
#+end_src

** Dockerfile Mode
Enable highlights on Dockerfile
#+begin_src emacs-lisp
(use-package dockerfile-mode)
#+end_src

* Major Mode
** Markdown Mode
Add Markdown support to README.md and other md files
#+begin_src emacs-lisp 
(use-package markdown-mode 
    :commands (markdown-mode gfm-mode) 
    :mode (("README\\.md\\'" . gfm-mode) ("\\.md\\'" . markdown-mode) ("\\.markdown\\'" . markdown-mode)) 
    :init (setq markdown-command "multimarkdown") 
    :config (custom-set-variables '(markdown-command "/usr/bin/pandoc"))
)
#+end_src

** JSON Mode
Get json mode so json file are parsed correctly
#+begin_src emacs-lisp
(use-package json-mode)
#+end_src

** JS2 Mode
JS2 is an enhanced version over original js major mode
#+begin_src emacs-lisp
(use-package js2-mode
  :config
    (setq js2-mode-show-parse-errors nil)
    (setq js2-mode-show-strict-warnings nil)  
)
#+end_src

* Programming
** LSP 
*** LSP Mode
Enable Language Server Procotol for the following languages. 
You will also need to install LSP server separately. 
A list can be found at
: https
://emacs-lsp.github.io/lsp-mode/page/languages/

This package also enable breadcrumb so you will see a header above your line #1
#+begin_src emacs-lisp
(use-package lsp-mode
    :hook (
        (mhtml-mode . lsp)
        (js-mode . lsp)
        (lsp-mode . lsp-enable-which-key-integration)
    )
    :commands (lsp lsp-deferred)
    :custom (lsp-headerline-breadcrumb-enable t)
)
#+end_src

*** LSP UI (VSCode like documentation on right side)
VSCode like documentation prompt once you hover your cursor onto a function
#+begin_src emacs-lisp
(use-package lsp-ui
    :ensure t
    :after lsp-mode
    :commands lsp-ui-mode
)
#+end_src

*** Tuning
Improving LSP default parameters and potentially speed up LSP load and run time
#+begin_src emacs-lisp
; --- LSP tuning starts 
(setq gc-cons-threshold 100000000)
(setq read-process-output-max (* 1024 1024)) ;; 1mb
(setq lsp-idle-delay 0.500)
(setq lsp-log-io nil) 
; --- LSP tuning ends 
#+end_src

** Flycheck
#+begin_src emacs-lisp
(use-package flycheck
    :config
        (global-flycheck-mode)
        (setq-default flycheck-disabled-checkers '(emacs-lisp-checkdoc emacs-lisp))
)
#+end_src

** Company Mode
#+begin_src emacs-lisp
(use-package company
  :init
  (setq company-backends
   '(company-files company-bbdb company-semantic company-cmake company-capf company-clang company-files
		   (company-dabbrev-code company-gtags company-etags company-keywords)
		   company-oddmuse company-dabbrev))
  :config 
    (setq company-idle-delay 0)
    (setq company-minimum-prefix-length 2)
)
#+end_src

** Yasnippets
#+begin_src emacs-lisp
(use-package yasnippet
    :after lsp-mode
    :config (yas-global-mode 1)
    (define-key yas-minor-mode-map (kbd "C-c y") #'yas-expand)
)

(use-package yasnippet-snippets
    :after yasnippet
)
#+end_src

** Prettier
Auto format javascript code
#+begin_src emacs-lisp
(use-package prettier-js
  :config
  (add-hook 'js2-mode-hook 'prettier-js-mode)
  (add-hook 'json-mode-hook 'prettier-js-mode)
)
#+end_src

** Treemacs
#+begin_src emacs-lisp
(use-package treemacs
    :config
        (treemacs-follow-mode t)
        (treemacs-filewatch-mode t)
)

(use-package treemacs-evil
    :after treemacs evil
)

(use-package treemacs-projectile
    :after treemacs projectile
)

(use-package lsp-treemacs
    :after treemacs
    :config (lsp-treemacs-sync-mode 1)
)

(use-package treemacs-all-the-icons)
#+end_src

** Autopair
Auto close ( and [ and {
#+begin_src emacs-lisp
(use-package autopair
  :config (autopair-global-mode)
  (add-hook 'highlight-parentheses-mode-hook
          '(lambda ()
             (setq autopair-handle-action-fns
                   (append
					(if autopair-handle-action-fns
						autopair-handle-action-fns
					  '(autopair-default-handle-action))
					'((lambda (action pair pos-before)
						(hl-paren-color-update)))))))
)
#+end_src

** Indent Guide
Show you indent for current code block
#+begin_src emacs-lisp
(use-package indent-guide
  :config (indent-guide-global-mode)
)
#+end_src

** Projectile
#+begin_src emacs-lisp
(use-package projectile
    :diminish projectile-mode
    :config 
        (projectile-mode)
        (add-to-list 'projectile-globally-ignored-directories "node_modules")
    :custom ((projectile-completion-system 'ivy))
    :bind-keymap ("C-c p" . projectile-command-map)
    :init
        (when (file-directory-p "~/Dev")
        (setq projectile-project-search-path '("~/Dev")))
        (setq projectile-indexing-method 'native)
        (setq projectile-switch-project-action #'projectile-dired)
)

(use-package counsel-projectile
    :config (counsel-projectile-mode)
)
#+end_src

** Magit
#+begin_src emacs-lisp
(use-package magit)
#+end_src

** Rainbow Delimiters
#+begin_src emacs-lisp
(use-package rainbow-delimiters
    :init (add-hook 'prog-mode-hook #'rainbow-delimiters-mode)
)
#+end_src

* Eyebrowse
Persist window layout and separate buffers to correspoding projects between emacs sessions
Window 1 is always Dashboard since you first landed in Dashboard, use Windows 2 - 9 for your own windows layout. 
Combine with Desktop.el, you can perserve buffers and counsel projectile can distinguish between projects.
#+begin_src emacs-lisp
(use-package eyebrowse
    :config (eyebrowse-mode t)
)
#+end_src

* Elcord
Add Rich Presence to Discord, show off your emac sessions
#+begin_src emacs-lisp
  ;; (use-package elcord
  ;;   :config (elcord-mode)
  ;; )
#+end_src

* Key binding
** Generally good to have
*** Remap abort in progress comand to ESC
#+begin_src emacs-lisp
(define-key key-translation-map (kbd "ESC") (kbd "C-g"))
#+end_src

** Global Function Keys
#+begin_src emacs-lisp
; Define shortcuts
(global-set-key (kbd "<f1>") (lambda() (interactive)(find-file "~/.config/emacs/init.org")))
(global-set-key (kbd "<f2>") (lambda() (interactive)(find-file "~/.config/emacs/init.el")))
#+end_src

** Global Ctrl-c Keys
#+begin_src emacs-lisp
(global-set-key (kbd "C-c t") 'eshell)
(global-set-key (kbd "C-c a") 'counsel-linux-app)
(global-set-key (kbd "C-c b") 'counsel-switch-buffer)
(global-set-key (kbd "C-c C-b") 'counsel-projectile-switch-to-buffer)
(global-set-key (kbd "C-c m") 'counsel-evil-marks)
(global-set-key (kbd "C-c n") 'treemacs)
(global-set-key (kbd "C-c C-w") 'persp-switch)
(global-set-key (kbd "C-c x") 'counsel-M-x)
#+end_src

* Hooks
** HL Line Mode (Highlight line mode)
Add horizontal highlight of current line
#+begin_src emacs-lisp
(add-hook 'prog-mode-hook 'hl-line-mode)
#+end_src

** Show Paren Mode
Highlight parentheses and curly braces when cursor is hovering
#+begin_src emacs-lisp
(add-hook 'prog-mode-hook 'show-paren-mode)
#+end_src

** Markdown Live Preview Mode
Enable EWW live preview Markdown file
#+begin_src emacs-lisp
(add-hook 'markdown-mode-hook 'markdown-live-preview-mode)
#+end_src

** Folding
Enable folding using Emacs build in functions
#+begin_src emacs-lisp
(add-hook 'prog-mode-hook #'hs-minor-mode)
#+end_src

** Filetype mode hook
#+begin_src emacs-lisp
(add-to-list 'auto-mode-alist '("\\.js\\'" . js2-mode))
(add-to-list 'auto-mode-alist '("\\.json\\'" . json-mode))
(add-to-list 'auto-mode-alist '("Dockerfile\\'" . dockerfile-mode))
#+end_src

* Org mode
** Settings for Org Mode
1. Indent headers with spaces
2. Proportional Font (font only take as much space as needed) opposite of monospace font
3. Word wrap
#+begin_src emacs-lisp
(defun efs/org-mode-setup ()
    (org-indent-mode)
    ;; (variable-pitch-mode 1)
    (visual-line-mode 1)
)
#+end_src

** Header font size
Setup head line with different font size
#+begin_src emacs-lisp
(dolist (face 
  '(
    (org-level-1 . 1.2)
    (org-level-2 . 1.1)
    (org-level-3 . 1.05)
    (org-level-4 . 1.0)
    (org-level-5 . 1.1)
    (org-level-6 . 1.1)
    (org-level-7 . 1.1)
    (org-level-8 . 1.1)
  ))
)
#+end_src

** Org mode
org tempo enable good old code block expansion like: <el expands to #+begin_src emacs-lisp
#+begin_src emacs-lisp
(use-package org
    :init (add-hook 'org-mode-hook (lambda () (setq-local display-line-numbers-type nil)))
    :hook 
        (org-mode . efs/org-mode-setup)
        (org-mode . (lambda () (require 'org-tempo)))
    :config
        (setq org-ellipsis " ▾")
        (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
        (add-to-list 'org-structure-template-alist '("js" . "src javascript"))
        (add-to-list 'org-structure-template-alist '("bash" . "src bash"))
        (add-to-list 'org-structure-template-alist '("conf" . "src conf"))
)
#+end_src

** Org Roam
Create [[https://roamresearch.com/][backlinks]] so you could reference files back and forth.
#+begin_src emacs-lisp
(use-package org-roam
      :after org
      :hook (org-mode . org-roam-mode)
      :custom (org-roam-directory "~/.config/emacs/roam")
      :bind (:map org-roam-mode-map
              (("C-c n l" . org-roam)
               ("C-c n f" . org-roam-find-file)
               ("C-c n g" . org-roam-graph))
              :map org-mode-map
              (("C-c n i" . org-roam-insert))
              (("C-c n I" . org-roam-insert-immediate)))
)
#+end_src

** Org Journal
Manage your journal with ease. Calendar will show which day you have journal.
#+begin_src emacs-lisp
(use-package org-journal
  :config
  (setq org-journal-file-format "%A %F")
  (setq org-journal-dir "~/.config/emacs/journal")
)
#+end_src

** Org bullets
Customize headline bullet points
#+begin_src emacs-lisp
(use-package org-bullets
  :after org
  :hook (org-mode . org-bullets-mode)
)
#+end_src

** Center Org content
Center the org mode content, so it looks more like word and less like ide
#+begin_src emacs-lisp
(defun efs/org-mode-visual-fill ()
  (setq visual-fill-column-width 100 visual-fill-column-center-text t)
  (visual-fill-column-mode 1)
)
#+end_src

** Org mode hook
Trigger center org content function and disable line number
#+begin_src emacs-lisp
(use-package visual-fill-column
    :hook (org-mode . efs/org-mode-visual-fill)
)

(add-hook 'org-mode-hook '(lambda () (setq display-line-numbers-type nil)))
#+end_src
* Helpful packages
** Which key
When using combo keys, C-c, you can then see a list of possible candidates for that prefix
#+begin_src emacs-lisp
(use-package which-key
    :config (which-key-mode)
)

#+end_src

** Helpful
Display a more helpful Help prompt including possible variable and source code for that function/variable
#+begin_src emacs-lisp
(use-package helpful
    :custom
        (counsel-describe-function-function #'helpful-callable)
        (counsel-describe-variable-function #'helpful-variable)
    :bind
        ([remap describe-function] . counsel-describe-function)
        ([remap describe-command] . helpful-command)
        ([remap describe-variable] . counsel-describe-variable)
        ([remap describe-key] . helpful-key) 
)
#+end_src

** Align table by pipe symbol
If your database table are not aligned correctly, use this function to align by pipe symbol.
Replace Pipe sysmbol to other symbol to format by that symbol
#+begin_src emacs-lisp
(defun align-pipe (start end)
  "Align columns by pipe"
  (interactive "r")
  (align-regexp start end "\\(\\s-*\\)|" 1 1 t)
)
#+end_src

