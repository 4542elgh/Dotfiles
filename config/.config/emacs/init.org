#+PROPERTY: header-args:emacs-lisp :tangle ~/ini.el
* Initialize package manager
** package.el
Package.el is only for downloading use-package, just like IE is only for downloading Chrome
#+begin_src emacs-lisp
(require 'package)

(add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
(add-to-list 'package-archives '("gnu" . "http://elpa.gnu.org/packages/"))
(add-to-list 'package-archives '("org" . "http://orgmode.org/elpa/"))

(package-initialize)

#+end_src

** use-package
Install use-package if it is not installed then enable it
#+begin_src emacs-lisp
;;; If use-pacakge is not installed, instll it first before requiring
(unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))

(require 'use-package)
#+end_src

** Use package always ensure
This ensures all use-packages install on first load or if elpa package does not exist 
#+begin_src emacs-lisp
(setq use-package-always-ensure t)
#+end_src

* Utility Parameters
** Enable copy to Primary clipboard
This enable x server to copy and paste text to Primary Clipboard
#+begin_src emacs-lisp
(setq x-select-enable-primary t)
#+end_src

** Auto revert file 
Refresh file content with newer content on disk
#+begin_src emacs-lisp
(setq global-auto-revert-mode t)
#+end_src

* UI improvements
** Welcome/Splash screen
Add Dashboard splash screen. It is better than default
#+begin_src emacs-lisp
(use-package dashboard
  :ensure t
  :config
  (dashboard-setup-startup-hook)
  (setq dashboard-projects-backend 'projectile)
  (add-to-list 'dashboard-items '(projects . 5))
)
#+end_src

** Theme
Intellij Darcula Theme for Emacs
#+begin_src emacs-lisp
(use-package jetbrains-darcula-theme
    :config (load-theme 'jetbrains-darcula t)
)
#+end_src

** Font
Load font face and font size
#+begin_src emacs-lisp
(set-frame-font "DejaVu Sans Mono 11" nil t)
#+end_src

** Line Number
*** Global
Set number lines for all modes and line number type to relative
#+begin_src emacs-lisp
(global-display-line-numbers-mode)
(setq display-line-numbers-type 'relative)
#+end_src

*** eshell 
Do not show line number for eshell
#+begin_src emacs-lisp
(use-package eshell
    :init (add-hook 'eshell-mode-hook
        (lambda () (setq-local display-line-numbers-type nil))
    )
)
#+end_src

** Load newer file 
Always load newer modified version of elpa package if you did modify it on your own. This does NOT download newer package via use-package
#+begin_src emacs-lisp
(setq load-prefer-newer t)
#+end_src

** Scroll bar 
Hide scroll bar
#+begin_src emacs-lisp
(scroll-bar-mode -1)
#+end_src

** Cursor
Solid cursor, default is blinking
#+begin_src emacs-lisp
(blink-cursor-mode 0)
#+end_src

** Spaceline

*** Powerline status bar
Base package
#+begin_src emacs-lisp
(use-package spaceline
    :config (spaceline-emacs-theme)
)
#+end_src

*** Include time in spaceline
Add time to mode line
#+begin_src emacs-lisp
(setq display-time-24hr-format t) 
(setq display-time-format "%H:%M:%S")        ; add seconds
(setq display-time-default-load-average nil)
(setq display-time-interval 1)               ; update every second
(display-time-mode 1)                 ; show time in mode line on startup
#+end_src

** Nyan Mode
Nyan Cat progress bar
#+begin_src emacs-lisp
(use-package nyan-mode
    :config (setq nyan-mode t)
)
#+end_src

** Ivy
*** Ivy
Minibuffer framework so things dont take up the entire window
#+begin_src emacs-lisp
  (use-package ivy
    :defer 0.1
    :diminish
    :config (ivy-mode)
    (define-key ivy-minibuffer-map (kbd "C-j") #'ivy-next-line)
    (define-key ivy-minibuffer-map (kbd "C-k") #'ivy-previous-line)
    ; Swiper mapped C-K to kill buffer, need to remap that to previous line
    (define-key ivy-switch-buffer-map (kbd "C-k") #'ivy-previous-line)
    (define-key ivy-switch-buffer-map (kbd "C-x") #'ivy-switch-buffer-kill)
  )
  
#+end_src

*** Ivy Rich
Display additional information, see counsel-switch-buffer for example
#+begin_src emacs-lisp
  (use-package ivy-rich
    :init (ivy-rich-mode 1)
  )
#+end_src

*** Counsel
Command mode with smart search and use ivy minibuffer framework
#+begin_src emacs-lisp
  (use-package counsel
    :after ivy
    :config
      (setcdr (assoc 'counsel-M-x ivy-initial-inputs-alist) "")
  )
#+end_src

*** Swiper 
Search in file for specific keyword
#+begin_src emacs-lisp
  (use-package swiper
    :after ivy
    :bind (
      ("C-p" . swiper)
    )
  )
#+end_src

* Evil Mode
** Vim keybinding for Emacs
Emulate Vim key binding inside Emacs
#+begin_src emacs-lisp
  (use-package evil
    :init
      ; Need this for evil-collection to work properly
      (setq evil-want-keybinding nil)
      ; Evil mode set Ctrl-U to scroll up.
      (setq evil-want-C-u-scroll t)
      (setq evil-want-C-i-jump nil)
      (setq evil-normal-state-tag "NORMAL")
      (setq evil-insert-state-tag "INSERT")
      (setq evil-visual-state-tag "VISUAL")
      ; Define undo-redo system, otherwise redo wont work
      (setq evil-undo-system 'undo-fu)
    :config
      ; Remap colon and semicolon
      (define-key evil-motion-state-map ";" #'evil-ex)
      (define-key evil-motion-state-map ":" #'evil-repeat-find-char)
      ;; C-p is used for Swiper, so we need to unbind it from evil
      (define-key evil-normal-state-map (kbd "C-p") nil)
      (define-key evil-emacs-state-map (kbd "C-z") nil)
      ;; (define-key evil-normal-state-map (kbd "C-h") #'evil-window-left)
      ;; (define-key evil-normal-state-map (kbd "C-j") #'evil-window-down)
      ;; (define-key evil-normal-state-map (kbd "C-k") #'evil-window-up)
      ;; (define-key evil-normal-state-map (kbd "C-l") #'evil-window-right)

      (evil-mode) 
  )
#+end_src

** Evil collection
Vim bindings for other applications, default is only for text editor
#+begin_src emacs-lisp
(use-package evil-collection
    :after evil
    :config (evil-collection-init)
)
#+end_src

** Evil Commentary
Use gcc for comment/uncomment line of code
#+begin_src emacs-lisp
(use-package evil-commentary
    :config (evil-commentary-mode)
)
#+end_src

** undo-fu
Undo Redo system for evil mode (Emacs 28 should have build-in undo-redo system)
#+begin_src emacs-lisp
(use-package undo-fu)
#+end_src

* Programming
** LSP 
*** LSP Mode
Enable Language Server Procotol for the following languages. 
You will also need to install LSP server separately. 
A list can be found at: https://emacs-lsp.github.io/lsp-mode/page/languages/

This package also enable breadcrumb so you will see a header above your line #1
#+begin_src emacs-lisp
  (use-package lsp-mode
    :hook (
      (mhtml-mode . lsp)
      (js-mode . lsp)
      (lsp-mode . lsp-enable-which-key-integration)
    )
    :commands (lsp lsp-deferred)
     :custom
    (lsp-headerline-breadcrumb-enable t)
  )
#+end_src

*** LSP UI (VSCode like documentation on right side)
VSCode like documentation prompt once you hover your cursor onto a function
#+begin_src emacs-lisp
  (use-package lsp-ui
    :ensure t
    :after lsp-mode
    :commands lsp-ui-mode
  )
#+end_src

*** Tuning
Improving LSP default parameters and potentially speed up LSP load and run time
#+begin_src emacs-lisp
; --- LSP tuning starts 
(setq gc-cons-threshold 100000000)
(setq read-process-output-max (* 1024 1024)) ;; 1mb
(setq lsp-idle-delay 0.500)
(setq lsp-log-io nil) 
; --- LSP tuning ends 
#+end_src

** Flycheck
#+begin_src emacs-lisp
(use-package flycheck
    :config
        (global-flycheck-mode)
        (setq-default flycheck-disabled-checkers '(emacs-lisp-checkdoc emacs-lisp))
)
#+end_src

** Company Mode
#+begin_src emacs-lisp
(use-package company)
#+end_src

** Yasnippets
#+begin_src emacs-lisp
(use-package yasnippet
    :after lsp-mode
    :config (yas-global-mode 1)
    (define-key yas-minor-mode-map (kbd "C-c y") #'yas-expand)
)

(use-package yasnippet-snippets
    :after yasnippet
)
#+end_src

** Treemacs
#+begin_src emacs-lisp
  (use-package treemacs
    :config
      (treemacs-follow-mode t)
      (treemacs-filewatch-mode t)
  )

  (use-package treemacs-evil
    :after treemacs evil
  )

  (use-package treemacs-projectile
    :after treemacs projectile
  )

  (use-package lsp-treemacs
    :after treemacs
    :config
    (lsp-treemacs-sync-mode 1)
  )

  (use-package json-mode)

#+end_src

** Projectile
#+begin_src emacs-lisp
(use-package projectile
    :diminish projectile-mode
    :config 
        (projectile-mode)
	(add-to-list 'projectile-globally-ignored-directories "node_modules")
    :custom ((projectile-completion-system 'ivy))
    :bind-keymap ("C-c p" . projectile-command-map)
    :init
        (when (file-directory-p "~/Dev")
        (setq projectile-project-search-path '("~/Dev")))
	(setq projectile-indexing-method 'native)
        (setq projectile-switch-project-action #'projectile-dired)
)

(use-package counsel-projectile
    :config (counsel-projectile-mode)
)
#+end_src

** Magit
#+begin_src emacs-lisp
(use-package magit)
#+end_src

** Rainbow Delimiters
#+begin_src emacs-lisp
(use-package rainbow-delimiters
    :init (add-hook 'prog-mode-hook #'rainbow-delimiters-mode)
)
#+end_src

* Perspective
Persist window layout and separate buffers to correspoding projects between emacs sessions
#+begin_src emacs-lisp
(use-package perspective
    :config (persp-mode)
)
#+end_src

* Elcord
Add Rich Presence to Discord, show off your emac sessions
#+begin_src emacs-lisp
  ;; (use-package elcord
  ;;   :config (elcord-mode)
  ;; )
#+end_src

* Key binding
** Generally good to have
*** Remap abort in progress comand to ESC
#+begin_src emacs-lisp
(define-key key-translation-map (kbd "ESC") (kbd "C-g"))
#+end_src

** Global Function Keys
#+begin_src emacs-lisp
; Define shortcuts
(global-set-key (kbd "<f1>") (lambda() (interactive)(find-file "~/.config/emacs/init.org")))
(global-set-key (kbd "<f2>") (lambda() (interactive)(find-file "~/.config/emacs/init.el")))
#+end_src

** Global Ctrl-c Keys
#+begin_src emacs-lisp
(global-set-key (kbd "C-c t") 'eshell)
(global-set-key (kbd "C-c a") 'counsel-linux-app)
(global-set-key (kbd "C-c b") 'counsel-switch-buffer)
(global-set-key (kbd "C-c m") 'counsel-evil-marks)
(global-set-key (kbd "C-c n") 'treemacs)
#+end_src

** Key chord
#+begin_src emacs-lisp
  (use-package key-chord
      :ensure t
      :config (key-chord-mode 1)
      (key-chord-define-global " x" 'counsel-M-x)
      (key-chord-define-global " p" 'counsel-projectile-rg)
  )
#+end_src

* Hooks
Open json mode when open file ending in .json
#+begin_src emacs-lisp
(add-to-list 'auto-mode-alist '("\\.json\\'" . json-mode))
#+end_src

* Org mode
#+begin_src emacs-lisp

  (defun efs/org-mode-setup ()
    (org-indent-mode)
    (variable-pitch-mode 1)
    (visual-line-mode 1))


    ;; Set faces for heading levels
    (dolist (face '((org-level-1 . 1.2)
                    (org-level-2 . 1.1)
                    (org-level-3 . 1.05)
                    (org-level-4 . 1.0)
                    (org-level-5 . 1.1)
                    (org-level-6 . 1.1)
                    (org-level-7 . 1.1)
                    (org-level-8 . 1.1)))
  )

  (use-package org
    :hook (org-mode . efs/org-mode-setup)
    (org-mode . (lambda () (require 'org-tempo)))
    :config
    (setq org-ellipsis " ▾")
    (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
  )

  (use-package org-bullets
    :after org
    :hook (org-mode . org-bullets-mode)
    :custom
    (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))

  (defun efs/org-mode-visual-fill ()
    (setq visual-fill-column-width 100
          visual-fill-column-center-text t)
    (visual-fill-column-mode 1))

  (use-package visual-fill-column
    :hook (org-mode . efs/org-mode-visual-fill))
#+end_src
* Helpful packages
** Which key
When using combo keys, C-c, you can then see a list of possible candidates for that prefix
#+begin_src emacs-lisp
(use-package which-key
    :config (which-key-mode)
)

#+end_src

** Helpful
Display a more helpful Help prompt including possible variable and source code for that function/variable
#+begin_src emacs-lisp
(use-package helpful
    :custom
        (counsel-describe-function-function #'helpful-callable)
        (counsel-describe-variable-function #'helpful-variable)
    :bind
        ([remap describe-function] . counsel-describe-function)
        ([remap describe-command] . helpful-command)
        ([remap describe-variable] . counsel-describe-variable)
        ([remap describe-key] . helpful-key) 
)
#+end_src

* System Generated config
#+begin_src emacs-lisp
(custom-set-variables
;; custom-set-variables was added by Custom.
;; If you edit it by hand, you could mess it up, so be careful.
;; Your init file should contain only one such instance.
;; If there is more than one, they won't work right.
'(package-selected-packages
    '(elcord evil-magit magit counsel-projectile key-chord swiper ivy use-package jetbrains-darcula-theme evil)))
(custom-set-faces)
;; custom-set-faces was added by Custom.
;; If you edit it by hand, you could mess it up, so be careful.
;; Your init file should contain only one such instance.
;; If there is more than one, they won't work right.
#+end_src
